echo $SHELL     查看当前shell

#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。(#!/bin/bash)
echo:向窗口输出文本


运行方式：
1、作为可执行程序
	chmod +x ./test.sh  #使脚本具有执行权限
	./test.sh  #执行脚本  一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。
2、作为解释器参数
	/bin/sh test.sh
	
Shell变量
	定义变量
		your_name="runoob.com"    注意，变量名和等号之间不能有空格
	使用变量
		echo $your_name   只要在变量名前面加美元符号即可；echo ${your_name}  变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界
	只读变量	
		readonly your_name
		
Shell字符串		
	字符串可以用单引号，也可以用双引号，也可以不用引号；双引号的优点：双引号里可以有变量；双引号里可以出现转义字符	
		
	获取字符串长度 	
		string="abcd"
		echo ${#string} #输出 4
	提取子字符串
		string="runoob is a great site"
		echo ${string:1:4} # 输出 unoo
	查找子字符串
		查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：
		string="runoob is a great site"
		echo `expr index "$string" io`  # 输出 4

Shell 数组
	bash支持一维数组（不支持多维数组），并且没有限定数组的大小

	定义数组 
		数组名=(值1 值2 ... 值n)   用括号来表示数组，数组元素用"空格"符号分割开
	读取数组 
		${数组名[下标]}
		@ 符号可以获取数组中的所有元素，例如：
		echo ${array_name[@]}
	获取数组的长度 
		# 取得数组元素的个数
		length=${#array_name[@]}
		# 或者
		length=${#array_name[*]}
		# 取得数组单个元素的长度
		lengthn=${#array_name[n]}
		
Shell 注释
	单行注释
		#。。。
	多行注释 
		多行注释还可以使用以下格式：
		:<<EOF
		注释内容...
		注释内容...
		注释内容...
		EOF

Shell 传递参数 http://www.runoob.com/linux/linux-shell-passing-arguments.html
	$n。n 代表一个数字，$0 为执行的文件名,1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……
		
Shell 基本运算符		
	原生bash不支持简单的数学运算,expr 是一款表达式计算工具，使用它能完成表达式的求值操作。 
	
	算术运算符
		条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。
		例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ')：
		val=`expr 2 + 2`
		echo "两数之和为 : $val"
	关系运算符http://www.runoob.com/linux/linux-shell-basic-operators.html		
		-eq 检测两个数是否相等，相等返回 true。[ $a -eq $b ] 返回 false。
	布尔运算符
		!  非
		-o 或
		-a 与
	文件测试运算符
		-d file  检测文件是否是目录，如果是，则返回 true。[ -d $file ] 返回 false

		
Shell echo命令
	显示不换行 
		#!/bin/sh
		echo -e "OK! \c" # -e 开启转义 \c 不换行
		echo "It is a test"
	显示结果定向至文件
		echo "It is a test" > myfile
		
	显示命令执行结果	
		echo `date`
		注意： 这里使用的是反引号 `, 而不是单引号 '。
		结果将显示当前日期

Shell printf 命令		
	printf  format-string  [arguments...]
	参数说明：
	format-string: 为格式控制字符串
	arguments: 为参数列表。

Shell 流程控制
	if 语句语法格式：
		if condition
		then
			command1 
			command2
			...
			commandN 
		fi
	if else 语法格式：
		if condition
		then
			command1 
			command2
			...
			commandN
		else
			command
fi

	
Shell 函数		
	[ function ] funname [()]
	{
		action;
		[return int;]
	}
	说明：
	1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。 
	2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255 
	函数返回值在调用该函数后通过 $? 来获得。

Shell 输入/输出重定向
	command > file	   将输出重定向到 file。
	command < file	   将输入重定向到 file。
	command >> file    将输出以追加的方式重定向到 file。
	n > file           将文件描述符为 n 的文件重定向到 file。
	n >> file          将文件描述符为 n 的文件以追加的方式重定向到 file。
	n >& m             将输出文件 m 和 n 合并。
	n <& m             将输入文件 m 和 n 合并。
	<< tag             将开始标记 tag 和结束标记 tag 之间的内容作为输入。
	需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。

Shell 文件包含		
	和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。
	Shell 文件包含的语法格式如下：
	. filename   # 注意点号(.)和文件名中间有一空格
	或
	source filename		
	注：被包含的文件 test1.sh 不需要可执行权限。
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
浮点型计算:
1.当被除很小时，计算计算结果会有很大的误差，因该将除转换为乘
2.大数吃小数

